/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,118,134],$V1=[2,208],$V2=[1,6],$V3=[1,4],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[2,168],$Va=[1,17],$Vb=[1,20],$Vc=[1,21],$Vd=[2,183],$Ve=[1,28],$Vf=[1,31],$Vg=[4,5,6,7,8,96,109,112,113],$Vh=[1,109,118,134,145],$Vi=[2,158],$Vj=[2,160],$Vk=[1,61],$Vl=[1,92],$Vm=[1,89],$Vn=[1,91],$Vo=[1,90],$Vp=[1,93],$Vq=[1,73],$Vr=[1,94],$Vs=[1,81],$Vt=[2,188],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,87],$Vy=[1,75],$Vz=[1,76],$VA=[1,88],$VB=[10,13,96],$VC=[2,4,6,7,8,10,13,25,76,92,96,99,101,104,127,139,140,142],$VD=[2,153],$VE=[29,61],$VF=[2,31],$VG=[1,131],$VH=[1,132],$VI=[1,126],$VJ=[1,142],$VK=[1,145],$VL=[1,140],$VM=[1,141],$VN=[1,143],$VO=[1,146],$VP=[1,147],$VQ=[15,16,17,18,19,20,29,49,50],$VR=[2,75],$VS=[1,158],$VT=[1,159],$VU=[2,90],$VV=[1,161],$VW=[1,162],$VX=[2,80],$VY=[1,164],$VZ=[1,165],$V_=[2,85],$V$=[1,167],$V01=[1,168],$V11=[2,115],$V21=[1,170],$V31=[1,171],$V41=[2,132],$V51=[1,177],$V61=[1,181],$V71=[1,183],$V81=[1,184],$V91=[8,11,15,16,17,18,19,20,25,27,29,45,56,57,61,82,84,85],$Va1=[2,71],$Vb1=[1,189],$Vc1=[1,190],$Vd1=[1,191],$Ve1=[1,192],$Vf1=[1,193],$Vg1=[1,194],$Vh1=[1,195],$Vi1=[8,11,15,16,17,18,19,20,25,27,29,42,45,49,50,56,57,61,82,84,85],$Vj1=[2,42],$Vk1=[2,23],$Vl1=[1,200],$Vm1=[1,201],$Vn1=[1,199],$Vo1=[8,11,15,16,17,18,19,20,25,27,29,45,49,50,56,57,60,61,82,84,85],$Vp1=[2,61],$Vq1=[1,203],$Vr1=[1,204],$Vs1=[8,11,15,16,17,18,19,20,25,27,29,40,42,45,56,57,60,61,82,84,85],$Vt1=[2,119],$Vu1=[1,206],$Vv1=[1,207],$Vw1=[8,11,15,16,17,18,19,20,25,27,29,40,42,45,49,50,56,57,60,61,82,84,85],$Vx1=[2,65],$Vy1=[1,209],$Vz1=[1,210],$VA1=[2,122],$VB1=[1,212],$VC1=[8,11,15,16,17,18,19,20,25,27,29,42,45,49,50,56,57,60,61,82,84,85],$VD1=[8,11,15,16,17,18,19,20,25,27,29,42,43,44,45,49,50,56,57,61,82,84,85],$VE1=[2,67],$VF1=[1,213],$VG1=[2,68],$VH1=[1,214],$VI1=[1,218],$VJ1=[8,11,15,16,17,18,19,20,25,27,29,40,42,45,49,50,51,56,57,60,61,82,84,85],$VK1=[2,100],$VL1=[1,221],$VM1=[8,11,25,27,29,42,45,49,50,56,57,82,84,85],$VN1=[13,96],$VO1=[2,7],$VP1=[1,232],$VQ1=[1,239],$VR1=[1,244],$VS1=[1,248],$VT1=[1,245],$VU1=[1,246],$VV1=[1,262],$VW1=[1,263],$VX1=[1,268],$VY1=[1,269],$VZ1=[1,270],$V_1=[1,271],$V$1=[8,11,15,16,17,18,19,20,25,27,29,40,42,43,44,45,49,50,56,57,60,61,82,84,85],$V02=[11,15,16,17,18,19,20,29,49,50,61],$V12=[25,27,82,84,85],$V22=[1,288],$V32=[1,287],$V42=[8,11,15,16,17,18,19,20,25,27,29,40,42,43,44,45,49,50,51,56,57,60,61,82,84,85],$V52=[1,298],$V62=[11,29],$V72=[11,29,49,50],$V82=[1,313],$V92=[2,9],$Va2=[25,27,42,56,57],$Vb2=[2,108],$Vc2=[2,105],$Vd2=[2,106],$Ve2=[2,109],$Vf2=[1,355],$Vg2=[2,110],$Vh2=[1,366],$Vi2=[11,15,16,17,18,19,20,29,49,50],$Vj2=[1,384],$Vk2=[1,383],$Vl2=[2,107];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"TIPO":3,"int":4,"boolean":5,"double":6,"String":7,"char":8,"BREAK":9,"break":10,"puntoComa":11,"CONTINUE":12,"continue":13,"OPS":14,"mayor":15,"menor":16,"igualLog":17,"menorIgual":18,"mayorIgual":19,"diferente":20,"OP_DEC_INC":21,"incremento":22,"decremento":23,"id_LLAMADA":24,"id":25,"id_LLAMADA1":26,"parentesisApertura":27,"PARAMS":28,"parentesisCierre":29,"COND":30,"EXPS":31,"SYM_COND":32,"EXP":33,"EXP_LOG":34,"COND1":35,"CONCAT_LOG":36,"STRING2":37,"ARITMETICOS_COND":38,"LOGICOS":39,"mas":40,"CONCAT":41,"menos":42,"multiplicacion":43,"division":44,"cadena":45,"CONCAT_LOG1":46,"SYM":47,"ARITMETICOS":48,"or":49,"and":50,"xor":51,"T":52,"EXP1":53,"F":54,"T1":55,"entero":56,"decimal":57,"INT":58,"INT1":59,"igualAR":60,"coma":61,"DOUBLE":62,"DOUBLE1":63,"CHAR":64,"CHAR1":65,"caracter":66,"STRING":67,"STRING1":68,"TEXT":69,"TEXT0":70,"TEXT4":71,"TEXT1":72,"TEXT2":73,"TEXT3":74,"BOOLEAN":75,"boolen":76,"BOOLEAN1":77,"T_LOG":78,"EXP_LOG1":79,"F_LOG":80,"T_LOG1":81,"not":82,"F_LOG1":83,"true":84,"false":85,"LLAMADA":86,"PARAMS1":87,"CONDICIONAL":88,"CONDICIONAL1":89,"OPS_CONDICIONAL":90,"FOR":91,"for":92,"FOR1":93,"llaveApertura":94,"INSTRUCCIONES":95,"llaveCierre":96,"FOR_INST":97,"WHILE":98,"while":99,"DO_WHILE":100,"do":101,"whileparentesisApertura":102,"IF":103,"if":104,"ELSE_IF":105,"else":106,"ELSE":107,"METODO":108,"public":109,"METODO1":110,"PARAMS_METODO":111,"void":112,"static":113,"corcheteApertura":114,"corcheteCierre":115,"PARAMS_METODO1":116,"MAINCLASS":117,"class":118,"MAIN":119,"MAINCLASS1":120,"PUBLIC":121,"CLASE":122,"CLASE1":123,"DECLARACION":124,"INICIALIZACION":125,"PRINT":126,"System":127,"punto":128,"out":129,"PRINT1":130,"print":131,"println":132,"INTERFACE":133,"interface":134,"METODO_INTERFACE":135,"METODO_INTERFACE1":136,"INSTRUCCIONES1":137,"INSTRUCCIONES2":138,"comentarioLinea":139,"comentarioML":140,"RETURN":141,"return":142,"CONDICION":143,"INICIO":144,"EOF":145,"$accept":0,"$end":1},
terminals_: {2:"error",4:"int",5:"boolean",6:"double",7:"String",8:"char",10:"break",11:"puntoComa",13:"continue",15:"mayor",16:"menor",17:"igualLog",18:"menorIgual",19:"mayorIgual",20:"diferente",22:"incremento",23:"decremento",25:"id",27:"parentesisApertura",29:"parentesisCierre",40:"mas",42:"menos",43:"multiplicacion",44:"division",45:"cadena",49:"or",50:"and",51:"xor",56:"entero",57:"decimal",60:"igualAR",61:"coma",66:"caracter",76:"boolen",82:"not",84:"true",85:"false",92:"for",94:"llaveApertura",96:"llaveCierre",99:"while",101:"do",102:"whileparentesisApertura",104:"if",106:"else",109:"public",112:"void",113:"static",114:"corcheteApertura",115:"corcheteCierre",118:"class",119:"MAIN",127:"System",128:"punto",129:"out",131:"print",132:"println",134:"interface",139:"comentarioLinea",140:"comentarioML",142:"return",143:"CONDICION",145:"EOF"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[9,2],[9,0],[12,2],[12,0],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,0],[21,1],[21,1],[24,2],[26,3],[26,1],[26,1],[26,0],[30,4],[30,2],[30,1],[30,1],[30,1],[30,2],[35,1],[35,0],[32,1],[32,3],[32,0],[38,2],[38,2],[38,2],[38,2],[41,1],[41,1],[36,3],[36,0],[46,2],[46,0],[31,4],[31,2],[31,1],[31,1],[47,2],[47,2],[48,1],[48,1],[48,1],[48,1],[39,1],[39,1],[39,1],[33,2],[53,3],[53,3],[53,0],[52,2],[55,3],[55,3],[55,0],[54,3],[54,1],[54,1],[54,2],[54,2],[54,1],[58,4],[59,3],[59,3],[59,0],[62,4],[62,2],[63,3],[63,3],[63,0],[64,4],[64,0],[65,3],[65,3],[65,0],[67,4],[67,0],[68,3],[68,3],[68,0],[37,1],[37,1],[69,4],[69,4],[69,4],[69,2],[69,2],[70,6],[72,3],[72,0],[73,2],[73,2],[73,2],[73,4],[73,1],[73,1],[74,2],[74,0],[71,1],[71,1],[75,4],[75,0],[77,3],[77,3],[77,0],[34,2],[79,3],[79,3],[79,0],[78,2],[81,3],[81,0],[80,2],[80,1],[83,3],[83,1],[83,1],[83,1],[86,4],[28,2],[87,3],[87,0],[88,3],[90,2],[90,2],[90,0],[89,2],[89,0],[91,9],[93,9],[97,1],[97,1],[97,1],[98,9],[100,10],[103,8],[105,2],[105,0],[107,1],[107,3],[108,2],[108,1],[108,0],[110,9],[110,9],[110,13],[111,3],[111,0],[116,4],[116,0],[117,7],[121,1],[121,0],[120,1],[120,0],[122,6],[123,2],[123,0],[124,1],[124,1],[124,1],[124,1],[124,1],[125,4],[125,0],[126,9],[126,0],[130,1],[130,1],[133,6],[135,2],[135,1],[135,0],[136,7],[136,7],[136,0],[95,2],[95,0],[137,1],[137,1],[137,1],[137,1],[137,1],[137,3],[137,1],[137,1],[137,1],[137,1],[138,3],[138,2],[138,1],[138,1],[141,3],[141,0],[144,2],[144,2],[144,1],[144,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 72: case 73:
this.$ = "= "+""; console.log("hola"); 
break;
case 77:
console.log(yytext+" error en linea "+this._$.first_line+ "fila "+this._$.first_column); token = new tkn.Token(yytext, 36, this._$.first_line, this._$.first_column);
break;
}
},
table: [o($V0,$V1,{144:1,122:2,133:3,121:5,109:$V2,145:$V3}),{1:[3]},o($V0,$V1,{122:2,133:3,121:5,144:7,109:$V2,145:$V3}),o($V0,$V1,{122:2,133:3,121:5,144:8,109:$V2,145:$V3}),{1:[2,207]},{118:[1,9],134:[1,10]},o([118,134],[2,162]),{1:[2,205]},{1:[2,206]},{25:[1,11]},{25:[1,12]},{94:[1,13]},{94:[1,14]},{3:19,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:$V9,108:16,109:$Va,110:18,112:$Vb,113:$Vc,123:15},{3:30,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:$Vd,109:$Ve,112:$Vf,135:27,136:29},{96:[1,32]},{3:19,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:$V9,108:16,109:$Va,110:18,112:$Vb,113:$Vc,123:33},{3:19,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,110:34,112:$Vb,113:$Vc},o($Vg,[2,152]),{25:[1,35]},{25:[1,36]},{112:[1,37]},{25:[2,1]},{25:[2,2]},{25:[2,3]},{25:[2,4]},{25:[2,5]},{96:[1,38]},{3:30,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:[2,186],112:$Vf,136:39},{96:[2,182]},{25:[1,40]},{25:[1,41]},o($Vh,[2,166]),{96:[2,167]},o($Vg,[2,151]),{27:[1,42]},{27:[1,43]},{25:[1,44]},o($Vh,[2,180]),{96:[2,181]},{27:[1,45]},{27:[1,46]},{3:48,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,29:$Vi,111:47},{3:48,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,29:$Vi,111:49},{27:[1,50]},{3:48,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,29:$Vi,111:51},{3:48,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,29:$Vi,111:52},{29:[1,53]},{25:[1,54]},{29:[1,55]},{7:[1,56]},{29:[1,57]},{29:[1,58]},{94:[1,59]},{29:$Vj,61:$Vk,116:60},{94:[1,62]},{25:[1,63]},{11:[1,64]},{11:[1,65]},{2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,58:82,62:84,64:85,67:83,75:86,76:$Vr,91:71,92:$Vs,95:66,96:$Vt,98:68,99:$Vu,100:69,101:$Vv,103:70,104:$Vw,124:72,126:74,127:$Vx,137:67,139:$Vy,140:$Vz,141:77,142:$VA},{29:[2,157]},{3:95,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8},{2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,58:82,62:84,64:85,67:83,75:86,76:$Vr,91:71,92:$Vs,95:96,96:$Vt,98:68,99:$Vu,100:69,101:$Vv,103:70,104:$Vw,124:72,126:74,127:$Vx,137:67,139:$Vy,140:$Vz,141:77,142:$VA},{114:[1,97]},{3:30,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:$Vd,109:$Ve,112:$Vf,135:98,136:29},{3:30,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:$Vd,109:$Ve,112:$Vf,135:99,136:29},{96:[1,100]},o($VB,$Vt,{137:67,98:68,100:69,103:70,91:71,124:72,126:74,141:77,58:82,67:83,62:84,64:85,75:86,95:101,2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,76:$Vr,92:$Vs,99:$Vu,101:$Vv,104:$Vw,127:$Vx,139:$Vy,140:$Vz,142:$VA}),o($VC,[2,189]),o($VC,[2,190]),o($VC,[2,191]),o($VC,[2,192]),o($VC,[2,193]),{22:[1,105],23:[1,106],27:[1,103],60:[1,104],138:102},o($VC,[2,195]),o($VC,[2,196]),o($VC,[2,197]),o($VC,[2,198]),{27:[1,107]},{94:[1,108]},{27:[1,109]},{27:[1,110]},o($VC,[2,169]),o($VC,[2,170]),o($VC,[2,171]),o($VC,[2,172]),o($VC,[2,173]),{128:[1,111]},{143:[1,112]},{25:[1,113]},{25:[1,114]},{25:[1,115]},{11:[1,116]},{25:[1,117]},{25:[1,118]},{25:[1,119]},{96:[1,120]},{115:[1,121]},{96:[2,184]},{96:[2,185]},{3:19,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:$VD,108:122,109:$Va,110:18,112:$Vb,113:$Vc},o($VB,[2,187]),{11:[1,123]},o($VE,$VF,{28:124,30:125,24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),{8:$VG,11:$VF,24:127,25:$VH,27:$VI,30:148,33:128,34:129,35:130,37:135,42:$VJ,45:$VK,52:133,54:136,56:$VL,57:$VM,69:138,70:139,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},{11:[2,201]},{11:[2,202]},o($VQ,$VF,{24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,88:149,30:150,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),o($VB,$Vt,{137:67,98:68,100:69,103:70,91:71,124:72,126:74,141:77,58:82,67:83,62:84,64:85,75:86,95:151,2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,76:$Vr,92:$Vs,99:$Vu,101:$Vv,104:$Vw,127:$Vx,139:$Vy,140:$Vz,142:$VA}),o($VQ,$VF,{24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,30:150,88:152,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),{3:154,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,93:153},{129:[1,155]},{11:[1,156]},{11:$VR,59:157,60:$VS,61:$VT},{11:$VU,60:$VV,61:$VW,68:160},{11:$VX,60:$VY,61:$VZ,63:163},o($VC,[2,77]),{11:$V_,60:$V$,61:$V01,65:166},{11:$V11,60:$V21,61:$V31,77:169},{29:$Vj,61:$Vk,116:172},{3:19,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:$VD,108:173,109:$Va,110:18,112:$Vb,113:$Vc},{29:[1,174]},o($Vg,[2,154]),o($VC,[2,194]),{29:[1,175]},{29:$V41,61:$V51,87:176},{24:182,25:$VH,27:$V61,31:178,33:179,34:180,42:$VJ,52:133,54:136,56:$V71,57:$V81,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},o($V91,$Va1,{32:185,72:186,38:187,39:188,40:$Vb1,42:$Vc1,43:$Vd1,44:$Ve1,49:$Vf1,50:$Vg1,51:$Vh1}),o($Vi1,[2,26]),o($Vi1,[2,27]),o($Vi1,[2,28]),o($Vi1,$Vj1,{36:196,40:[1,197]}),o([8,11,15,16,17,18,19,20,25,29,40,42,43,44,45,49,50,51,56,57,60,61,82,84,85],$Vk1,{26:198,22:$Vl1,23:$Vm1,27:$Vn1}),o($Vo1,$Vp1,{53:202,40:$Vq1,42:$Vr1}),o($Vs1,$Vt1,{79:205,49:$Vu1,50:$Vv1}),o($Vi1,[2,30]),o($Vw1,$Vx1,{55:208,43:$Vy1,44:$Vz1}),o($Vw1,$VA1,{81:211,51:$VB1}),o($VC1,[2,91]),o($VC1,[2,92]),o($VD1,$VE1,{40:$VF1}),o($VD1,$VG1,{40:$VH1}),{56:[1,215],57:[1,216]},{24:219,25:$VH,27:$VI1,83:217,84:$VO,85:$VP},o($VJ1,[2,124]),o($VC1,$VK1,{72:220,40:$VL1}),o($VJ1,[2,126]),o($VJ1,[2,127]),{11:[2,200]},{29:[1,222]},o($VM1,[2,138],{89:223,14:224,15:[1,225],16:[1,226],17:[1,227],18:[1,228],19:[1,229],20:[1,230]}),o($VN1,$VO1,{9:231,10:$VP1}),{29:[1,233]},{29:[1,234]},{25:[1,235]},{128:[1,236]},o($VC,[2,203]),{11:[1,237]},{24:240,25:$VH,27:$VQ1,33:238,42:$VJ,52:133,54:136,56:$V71,57:$V81},{25:[1,241]},{11:[1,242]},{8:$VR1,24:247,25:$VH,27:$VS1,37:243,45:$VK,56:$VT1,57:$VU1,69:138,70:139},{25:[1,249]},{11:[1,250]},{24:240,25:$VH,27:$VQ1,33:251,42:$VJ,52:133,54:136,56:$V71,57:$V81},{25:[1,252]},{11:[1,253]},{66:[1,254]},{25:[1,255]},{11:[1,256]},{24:219,25:$VH,27:$VI1,34:257,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},{25:[1,258]},{29:[2,159]},o($Vg,[2,155]),{94:[1,259]},{11:[2,199]},o($VE,[2,130]),o($VE,$VF,{30:125,24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,28:260,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),{29:[1,261]},{29:$VV1},{29:$VW1},{24:182,25:$VH,27:$V61,31:264,33:179,34:180,42:$VJ,52:133,54:136,56:$V71,57:$V81,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},{29:$Va1,39:267,40:$VX1,42:$VY1,43:$VZ1,44:$V_1,47:265,48:266,49:$Vf1,50:$Vg1,51:$Vh1},o($V$1,$VE1),o($V$1,$VG1),o($Vi1,[2,25]),o($VC1,[2,97]),o($Vi1,[2,32]),{24:219,25:$VH,27:$VI1,34:272,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},o($V02,$VF,{33:128,34:129,35:130,52:133,78:134,54:136,80:137,69:138,70:139,83:144,73:273,41:274,24:279,37:281,30:282,8:[1,275],25:$VH,27:[1,278],42:$VJ,45:[1,280],56:[1,276],57:[1,277],82:$VN,84:$VO,85:$VP}),{24:240,25:$VH,27:$VQ1,33:283,42:$VJ,52:133,54:136,56:$V71,57:$V81},{24:240,25:$VH,27:$VQ1,33:284,42:$VJ,52:133,54:136,56:$V71,57:$V81},{24:240,25:$VH,27:$VQ1,33:285,42:$VJ,52:133,54:136,56:$V71,57:$V81},o($V12,[2,55]),o($V12,[2,56]),o($V12,[2,57]),o($Vi1,[2,29]),{25:$V22,45:$V32,71:286},o($V42,[2,19]),o($VE,$VF,{30:125,24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,28:289,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),o($V42,[2,21]),o($V42,[2,22]),o($VC1,[2,58]),{24:240,25:$VH,27:$VQ1,42:$VJ,52:290,54:136,56:$V71,57:$V81},{24:240,25:$VH,27:$VQ1,42:$VJ,52:291,54:136,56:$V71,57:$V81},o($Vw1,[2,116]),{24:219,25:$VH,27:$VI1,78:292,80:137,82:$VN,83:144,84:$VO,85:$VP},{24:219,25:$VH,27:$VI1,78:293,80:137,82:$VN,83:144,84:$VO,85:$VP},o($Vw1,[2,62]),{24:240,25:$VH,27:$VQ1,42:$VJ,54:294,56:$V71,57:$V81},{24:240,25:$VH,27:$VQ1,42:$VJ,54:295,56:$V71,57:$V81},o($Vw1,[2,120]),{24:219,25:$VH,27:$VI1,80:296,82:$VN,83:144,84:$VO,85:$VP},{25:$V22,45:$V52,71:297},{25:$V22,45:$V52,71:299},o($V$1,[2,69]),o($V$1,[2,70]),o($VJ1,[2,123]),{24:219,25:$VH,27:$VI1,34:300,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},o($VJ1,[2,128]),o($VC1,[2,96]),{8:[1,301],24:305,25:$VH,27:[1,304],45:[1,306],56:[1,302],57:[1,303],73:273},{94:[1,307]},o($V62,[2,136],{90:308,49:[1,309],50:[1,310]}),o($V72,$VF,{24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,30:311,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),o($VM1,[2,10]),o($VM1,[2,11]),o($VM1,[2,12]),o($VM1,[2,13]),o($VM1,[2,14]),o($VM1,[2,15]),{12:312,13:$V82,96:$V92},{11:[1,314]},{94:[1,315]},{94:[1,316]},{60:[1,317]},{130:318,131:[1,319],132:[1,320]},o($VC,[2,72]),{11:$VR,59:321,60:$VS,61:$VT},{24:240,25:$VH,27:$VQ1,33:322,42:$VJ,52:133,54:136,56:$V71,57:$V81},o($V$1,$Va1),{11:$VR,59:323,60:$VS,61:$VT},o($VC,[2,86]),{11:$VU,60:$VV,61:$VW,68:324},{40:[1,325]},{40:$VF1},{40:$VH1},o($VC1,$VK1,{72:186,40:$VL1}),{24:182,25:$VH,27:$V61,31:326,33:327,34:328,42:$VJ,52:133,54:136,56:$V71,57:$V81,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},{11:$VU,60:$VV,61:$VW,68:329},o($VC,[2,76]),{11:$VX,60:$VY,61:$VZ,63:330},{11:$VX,60:$VY,61:$VZ,63:331},o($VC,[2,81]),{11:$V_,60:$V$,61:$V01,65:332},{11:$V_,60:$V$,61:$V01,65:333},o($VC,[2,111]),{11:$V11,60:$V21,61:$V31,77:334},{11:$V11,60:$V21,61:$V31,77:335},{2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,58:82,62:84,64:85,67:83,75:86,76:$Vr,91:71,92:$Vs,95:336,96:$Vt,98:68,99:$Vu,100:69,101:$Vv,103:70,104:$Vw,124:72,126:74,127:$Vx,137:67,139:$Vy,140:$Vz,141:77,142:$VA},{29:$V41,61:$V51,87:337},o($V91,[2,34],{38:187,39:188,32:338,40:[1,339],42:$Vc1,43:$Vd1,44:$Ve1,49:$Vf1,50:$Vg1,51:$Vh1}),o($V$1,[2,66]),o($VJ1,[2,125]),{29:[1,340]},{29:[2,46]},{24:240,25:$VH,27:$VQ1,33:341,42:$VJ,52:133,54:136,56:$V71,57:$V81},{24:219,25:$VH,27:$VI1,34:342,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},o($Va2,[2,51]),o($Va2,[2,52]),o($Va2,[2,53]),o($Va2,[2,54]),o($Vi1,$Vj1,{36:343,40:[1,344]}),o($VC1,$VK1,{72:345,40:$VL1}),o($Vi1,[2,35]),o($Vi1,$Vb2,{36:196,74:346,40:[1,347]}),o($VD1,$VE1,{74:348,40:[1,349]}),o($VD1,$VG1,{74:350,40:[1,351]}),{24:182,25:$VH,27:$V61,31:352,33:179,34:180,42:$VJ,52:133,54:136,56:$V71,57:$V81,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},o($V91,$Vc2,{32:185,72:186,38:187,39:188,40:$Vb1,42:$Vc1,43:$Vd1,44:$Ve1,49:$Vf1,50:$Vg1,51:$Vh1}),o($Vi1,$Vd2,{72:220,40:$VL1}),o($Vi1,[2,39]),o($Vi1,[2,40]),o($Vi1,[2,36]),o($Vi1,[2,37]),o($Vi1,[2,38]),o($VC1,$VK1,{72:353,40:$VL1}),o($Vi1,$Ve2,{46:354,40:$Vf2}),o($Vw1,$Vg2),{29:[1,356]},o($Vo1,$Vp1,{53:357,40:$Vq1,42:$Vr1}),o($Vo1,$Vp1,{53:358,40:$Vq1,42:$Vr1}),o($Vs1,$Vt1,{79:359,49:$Vu1,50:$Vv1}),o($Vs1,$Vt1,{79:360,49:$Vu1,50:$Vv1}),o($Vw1,$Vx1,{55:361,43:$Vy1,44:$Vz1}),o($Vw1,$Vx1,{55:362,43:$Vy1,44:$Vz1}),o($Vw1,$VA1,{81:363,51:$VB1}),o($VC1,$VK1,{72:364,40:$VL1}),o($Vw1,$Ve2),o($VC1,$VK1,{72:365,40:$VL1}),{29:$VW1},o($VC1,$Vb2,{74:346,40:$Vh2}),o($VC1,$Vb2,{74:348,40:$Vh2}),o($VC1,$Vb2,{74:350,40:$Vh2}),{24:182,25:$VH,27:$V61,31:367,33:327,34:328,42:$VJ,52:133,54:136,56:$V71,57:$V81,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},o($Vw1,$Vc2),o($Vw1,$Vd2),o($VB,$Vt,{137:67,98:68,100:69,103:70,91:71,124:72,126:74,141:77,58:82,67:83,62:84,64:85,75:86,95:368,2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,76:$Vr,92:$Vs,99:$Vu,101:$Vv,104:$Vw,127:$Vx,139:$Vy,140:$Vz,142:$VA}),o($V62,[2,133]),o($Vi2,$VF,{24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,30:150,88:369,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),o($Vi2,$VF,{24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,30:150,88:370,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),o($V72,[2,137]),{96:[1,371]},{11:[1,372]},o($VN1,[2,6]),{2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,58:82,62:84,64:85,67:83,75:86,76:$Vr,91:71,92:$Vs,95:373,96:$Vt,98:68,99:$Vu,100:69,101:$Vv,103:70,104:$Vw,124:72,126:74,127:$Vx,137:67,139:$Vy,140:$Vz,141:77,142:$VA},o($VB,$Vt,{137:67,98:68,100:69,103:70,91:71,124:72,126:74,141:77,58:82,67:83,62:84,64:85,75:86,95:374,2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,76:$Vr,92:$Vs,99:$Vu,101:$Vv,104:$Vw,127:$Vx,139:$Vy,140:$Vz,142:$VA}),{6:[1,378],25:[1,377],56:[1,376],97:375},{27:[1,379]},{27:[2,178]},{27:[2,179]},{11:[2,73]},{29:$VV1},{11:[2,74]},{11:[2,88]},{25:$V22,45:$V52,71:286},{29:[1,380]},{29:[2,47]},{29:[2,48]},{11:[2,89]},{11:[2,78]},{11:[2,79]},{11:[2,83]},{11:[2,84]},{11:[2,113]},{11:[2,114]},{96:[1,381]},o($VE,[2,131]),o($Vi1,[2,24]),o($V02,$VF,{24:127,33:128,34:129,35:130,52:133,78:134,54:136,80:137,69:138,70:139,83:144,41:274,37:281,30:282,71:382,8:$VG,25:$Vj2,27:$VI,42:$VJ,45:$Vk2,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),{39:267,40:$VX1,42:$VY1,43:$VZ1,44:$V_1,47:385,48:266,49:$Vf1,50:$Vg1,51:$Vh1},{29:[2,49]},{29:[2,50]},o($Vi1,[2,33]),{45:[1,386]},o($VC1,[2,99]),o($Vw1,[2,101]),{25:$V22,45:$V32,71:387},o($Vw1,[2,102]),{25:$V22,45:$V52,71:388},o($Vw1,[2,103]),{25:$V22,45:$V52,71:389},{29:[1,390]},o($VC1,[2,93]),o($Vi1,[2,41]),{8:$VR1,24:247,25:$VH,27:$VS1,37:391,45:$VK,56:$VT1,57:$VU1,69:138,70:139},o($V42,[2,20]),o($VC1,[2,59]),o($VC1,[2,60]),o($Vw1,[2,117]),o($Vw1,[2,118]),o($Vw1,[2,63]),o($Vw1,[2,64]),o($Vw1,[2,121]),o($VC1,[2,94]),o($VC1,[2,95]),{25:$V22,45:$V52,71:392},{29:[1,393]},o($VN1,$VO1,{9:394,10:$VP1}),o($V62,[2,134]),o($V62,[2,135]),{102:[1,395]},{96:[2,8]},{96:[1,396]},o($VN1,$VO1,{9:397,10:$VP1}),{11:[1,398]},{11:[2,141]},{11:[2,142]},{11:[2,143]},{8:$VG,24:127,25:$VH,27:$VI,29:$VF,30:399,33:128,34:129,35:130,37:135,42:$VJ,45:$VK,52:133,54:136,56:$VL,57:$VM,69:138,70:139,78:134,80:137,82:$VN,83:144,84:$VO,85:$VP},{40:[1,400]},{3:19,4:$V4,5:$V5,6:$V6,7:$V7,8:$V8,96:$VD,108:401,109:$Va,110:18,112:$Vb,113:$Vc},o($VC1,$VK1,{72:402,40:$VL1}),o($Vi1,$Ve2,{72:220,40:$VL1}),o([8,11,15,16,17,18,19,20,25,29,40,42,45,49,50,56,57,61,82,84,85],$Vg2,{26:198,22:$Vl1,23:$Vm1,27:$Vn1,43:$Vk1,44:$Vk1,51:$Vk1}),{29:[2,45]},o($Vi1,[2,44],{46:354,40:$Vf2}),o($Vi1,$Vl2,{72:353,40:$VL1}),o($Vi1,$Vl2,{72:364,40:$VL1}),o($Vi1,$Vl2,{72:365,40:$VL1}),o($V91,$Vb2,{38:187,39:188,32:338,74:403,40:[1,404],42:$Vc1,43:$Vd1,44:$Ve1,49:$Vf1,50:$Vg1,51:$Vh1}),o($Vi1,[2,43]),o($Vw1,$Vl2),o($VC1,$Vb2,{74:403,40:$Vh2}),{12:405,13:$V82,96:$V92},o($VQ,$VF,{24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,30:150,88:406,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),o($VC,[2,148],{105:407,106:[1,408]}),{12:409,13:$V82,96:$V92},o([11,15,16,17,18,19,20,49,50],$VF,{24:127,33:128,34:129,35:130,52:133,78:134,37:135,54:136,80:137,69:138,70:139,83:144,30:150,88:410,8:$VG,25:$VH,27:$VI,42:$VJ,45:$VK,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),{29:[1,411]},{25:$V22,45:$V52,71:382},o($Vg,[2,156]),o($VC1,[2,98]),o($Vw1,[2,104]),o($V02,$VF,{24:127,33:128,34:129,35:130,52:133,78:134,54:136,80:137,69:138,70:139,83:144,41:274,37:281,30:282,71:412,8:$VG,25:$Vj2,27:$VI,42:$VJ,45:$Vk2,56:$VL,57:$VM,82:$VN,84:$VO,85:$VP}),{96:[1,413]},{29:[1,414]},o($VC,[2,146]),{94:[1,417],103:416,104:$Vw,107:415},{96:[1,418]},{11:[1,419]},{11:[1,420]},o($Vi1,$Vl2,{72:402,40:$VL1}),o($VC,[2,144]),{11:[1,421]},o($VC,[2,147]),o($VC,[2,149]),{2:$Vl,4:$Vm,6:$Vn,7:$Vo,8:$Vp,25:$Vq,58:82,62:84,64:85,67:83,75:86,76:$Vr,91:71,92:$Vs,95:422,96:$Vt,98:68,99:$Vu,100:69,101:$Vv,103:70,104:$Vw,124:72,126:74,127:$Vx,137:67,139:$Vy,140:$Vz,141:77,142:$VA},o($VC,[2,139]),{25:[1,423]},o($VC,[2,176]),o($VC,[2,145]),{96:[1,424]},{21:425,22:[1,426],23:[1,427]},o($VC,[2,150]),{29:[2,140]},{29:[2,17]},{29:[2,18]}],
defaultActions: {4:[2,207],7:[2,205],8:[2,206],22:[2,1],23:[2,2],24:[2,3],25:[2,4],26:[2,5],29:[2,182],33:[2,167],39:[2,181],60:[2,157],98:[2,184],99:[2,185],105:[2,201],106:[2,202],148:[2,200],172:[2,159],175:[2,199],265:[2,46],319:[2,178],320:[2,179],321:[2,73],323:[2,74],324:[2,88],327:[2,47],328:[2,48],329:[2,89],330:[2,78],331:[2,79],332:[2,83],333:[2,84],334:[2,113],335:[2,114],341:[2,49],342:[2,50],372:[2,8],376:[2,141],377:[2,142],378:[2,143],385:[2,45],425:[2,140],426:[2,17],427:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const tkn = require("./token/token");
    var lt = require('./rutas/rutas')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:token = new tkn.Token(yy_.yytext, 3, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 140; 
break;
case 1:token = new tkn.Token(yy_.yytext, 9, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 94; 
break;
case 2:token = new tkn.Token(yy_.yytext, 10, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 96; 
break;
case 3:token = new tkn.Token(yy_.yytext, 13, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 114; 
break;
case 4:token = new tkn.Token(yy_.yytext, 14, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 115; 
break;
case 5:token = new tkn.Token(yy_.yytext, 11, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 27; 
break;
case 6:token = new tkn.Token(yy_.yytext, 12, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 29; 
break;
case 7:token = new tkn.Token(yy_.yytext, 16, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 128; 
break;
case 8:token = new tkn.Token(yy_.yytext, 15, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 61; 
break;
case 9:token = new tkn.Token(yy_.yytext, 18, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 11; 
break;
case 10:token = new tkn.Token(yy_.yytext, 19, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 'dosPuntos'; 
break;
case 11:token = new tkn.Token(yy_.yytext, 32, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 17; 
break;
case 12:token = new tkn.Token(yy_.yytext, 17, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 60; 
break;
case 13:token = new tkn.Token(yy_.yytext, 20, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 40; 
break;
case 14:token = new tkn.Token(yy_.yytext, 21, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 42; 
break;
case 15:token = new tkn.Token(yy_.yytext, 22, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 43; 
break;
case 16:token = new tkn.Token(yy_.yytext, 30, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 19; 
break;
case 17:token = new tkn.Token(yy_.yytext, 31, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 18; 
break;
case 18:token = new tkn.Token(yy_.yytext, 24, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 15; 
break;
case 19:token = new tkn.Token(yy_.yytext, 25, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 16; 
break;
case 20:token = new tkn.Token(yy_.yytext, 33, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 20; 
break;
case 21:token = new tkn.Token(yy_.yytext, 34, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 22; 
break;
case 22:token = new tkn.Token(yy_.yytext, 35, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 23; 
break;
case 23:token = new tkn.Token(yy_.yytext, 26, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 82; 
break;
case 24:token = new tkn.Token(yy_.yytext, 27, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 51; 
break;
case 25:token = new tkn.Token(yy_.yytext, 29, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 49; 
break;
case 26:token = new tkn.Token(yy_.yytext, 28, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 50; 
break;
case 27:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 10; 
break;
case 28:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 5; 
break;
case 29:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 8; 
break;
case 30:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 118; 
break;
case 31:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 13; 
break;
case 32:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 101; 
break;
case 33:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 6; 
break;
case 34:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 106; 
break;
case 35:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 'extends'; 
break;
case 36:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 85; 
break;
case 37:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 92; 
break;
case 38:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 104; 
break;
case 39:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 4; 
break;
case 40:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 134; 
break;
case 41:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 'implements'; 
break;
case 42:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 'new'; 
break;
case 43:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 129; 
break;
case 44:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 131; 
break;
case 45:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 132; 
break;
case 46:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 109; 
break;
case 47:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 142; 
break;
case 48:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 113; 
break;
case 49:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 7; 
break;
case 50:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 127; 
break;
case 51:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 84; 
break;
case 52:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 'this'; 
break;
case 53:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 112; 
break;
case 54:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 99; 
break;
case 55:token = new tkn.Token(yy_.yytext, 37, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 'finalArchivo'; 
break;
case 56:token = new tkn.Token(yy_.yytext, 2, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 45; 
break;
case 57:token = new tkn.Token(yy_.yytext, 5, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 66; 
break;
case 58:token = new tkn.Token(yy_.yytext, 6, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 25; 
break;
case 59:token = new tkn.Token(yy_.yytext, 23, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 44; 
break;
case 60:token = new tkn.Token(yy_.yytext, 7, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 56; 
break;
case 61:token = new tkn.Token(yy_.yytext, 8, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.tokens(token, false); return 57; 
break;
case 62:
break;
case 63:return 145;
break;
case 64: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); token = new tkn.Token(yy_.yytext, 36, yy_.yylloc.first_line, yy_.yylloc.first_column); lt.erroresL(token, false);
break;
}
},
rules: [/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:break\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:class\b)/i,/^(?:continue\b)/i,/^(?:do\b)/i,/^(?:double\b)/i,/^(?:else\b)/i,/^(?:extends\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:int\b)/i,/^(?:interface\b)/i,/^(?:implements\b)/i,/^(?:new\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:public\b)/i,/^(?:return\b)/i,/^(?:static\b)/i,/^(?:String\b)/i,/^(?:System\b)/i,/^(?:true\b)/i,/^(?:this\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:finalArchivo\b)/i,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/i,/^(?:[\']([^\\\"]*([\\][\\\"ntr][^\\\"]*)*)?[\'])/i,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/i,/^(?:\/)/i,/^(?:(-)?[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[ \r\t\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}