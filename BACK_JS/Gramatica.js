/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,185],$V2=[95,108],$V3=[2,155],$V4=[1,31],$V5=[1,29],$V6=[1,32],$V7=[1,30],$V8=[1,33],$V9=[1,34],$Va=[2,171],$Vb=[1,37],$Vc=[2,157],$Vd=[2,4,6,7,8,10,13,25,76,91,95,98,100,103,108,128],$Ve=[2,71],$Vf=[1,58],$Vg=[1,59],$Vh=[2,86],$Vi=[1,61],$Vj=[1,62],$Vk=[2,76],$Vl=[1,64],$Vm=[1,65],$Vn=[2,81],$Vo=[1,67],$Vp=[1,68],$Vq=[2,111],$Vr=[1,70],$Vs=[1,71],$Vt=[108,140],$Vu=[1,81],$Vv=[1,77],$Vw=[1,78],$Vx=[1,79],$Vy=[1,87],$Vz=[1,92],$VA=[1,90],$VB=[1,88],$VC=[1,89],$VD=[1,106],$VE=[1,104],$VF=[1,107],$VG=[1,108],$VH=[8,11,15,16,17,18,19,20,25,27,29,46,56,57,60,61,82,84,85],$VI=[2,59],$VJ=[1,114],$VK=[1,115],$VL=[8,11,15,16,17,18,19,20,25,27,29,40,42,46,56,57,60,61,82,84,85],$VM=[2,63],$VN=[1,117],$VO=[1,118],$VP=[8,11,15,16,17,18,19,20,25,27,29,40,42,43,44,46,56,57,60,61,82,84,85],$VQ=[2,65],$VR=[2,66],$VS=[2,67],$VT=[1,121],$VU=[1,125],$VV=[1,126],$VW=[2,96],$VX=[1,128],$VY=[1,131],$VZ=[8,11,15,16,17,18,19,20,25,27,29,40,46,56,57,60,61,82,84,85],$V_=[2,115],$V$=[1,142],$V01=[1,143],$V11=[8,11,15,16,17,18,19,20,25,27,29,40,46,49,50,56,57,60,61,82,84,85],$V21=[2,118],$V31=[1,145],$V41=[8,11,15,16,17,18,19,20,25,27,29,40,46,49,50,51,56,57,60,61,82,84,85],$V51=[1,154],$V61=[8,11,15,16,17,18,19,20,25,27,29,40,42,43,44,46,49,50,51,56,57,60,61,82,84,85],$V71=[29,61],$V81=[2,29],$V91=[1,162],$Va1=[1,157],$Vb1=[1,164],$Vc1=[1,165],$Vd1=[1,168],$Ve1=[1,167],$Vf1=[1,185],$Vg1=[1,186],$Vh1=[1,187],$Vi1=[1,188],$Vj1=[1,189],$Vk1=[1,190],$Vl1=[1,191],$Vm1=[1,195],$Vn1=[2,128],$Vo1=[1,203],$Vp1=[8,11,15,16,17,18,19,20,25,27,29,46,56,57,61,82,84,85],$Vq1=[1,209],$Vr1=[1,210],$Vs1=[1,211],$Vt1=[2,40],$Vu1=[8,11,15,16,17,18,19,20,25,27,29,42,43,44,46,56,57,61,82,84,85],$Vv1=[2,105],$Vw1=[2,106],$Vx1=[2,104],$Vy1=[1,219],$Vz1=[2,101],$VA1=[2,102],$VB1=[25,27,56,57],$VC1=[25,27,82,84,85],$VD1=[1,262],$VE1=[2,103],$VF1=[2,42],$VG1=[1,294],$VH1=[1,293],$VI1=[1,292],$VJ1=[2,173],$VK1=[1,289],$VL1=[1,290],$VM1=[1,291],$VN1=[1,295],$VO1=[10,13,95],$VP1=[2,4,6,7,8,10,13,25,76,91,95,98,100,103,128],$VQ1=[15,16,17,18,19,20,29],$VR1=[8,11,25,27,29,46,56,57,82,84,85],$VS1=[13,95],$VT1=[2,7],$VU1=[1,332],$VV1=[11,29],$VW1=[1,342],$VX1=[2,9];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"TIPO":3,"int":4,"boolean":5,"double":6,"String":7,"char":8,"BREAK":9,"break":10,"puntoComa":11,"CONTINUE":12,"continue":13,"OPS":14,"mayor":15,"menor":16,"igualLog":17,"menorIgual":18,"mayorIgual":19,"diferente":20,"OP_DEC_INC":21,"incremento":22,"decremento":23,"id_LLAMADA":24,"id":25,"id_LLAMADA1":26,"parentesisApertura":27,"PARAMS":28,"parentesisCierre":29,"COND":30,"EXPS":31,"SYM_COND":32,"EXP":33,"EXP_LOG":34,"COND1":35,"CONCAT_LOG":36,"STRING2":37,"ARITMETICOS_COND":38,"LOGICOS":39,"mas":40,"CONCAT":41,"menos":42,"multiplicacion":43,"division":44,"CONCAT_LOG1":45,"cadena":46,"SYM":47,"ARITMETICOS":48,"or":49,"and":50,"xor":51,"T":52,"EXP1":53,"F":54,"T1":55,"entero":56,"decimal":57,"INT":58,"INT1":59,"igualAR":60,"coma":61,"DOUBLE":62,"DOUBLE1":63,"CHAR":64,"CHAR1":65,"caracter":66,"STRING":67,"STRING1":68,"TEXT":69,"TEXT0":70,"TEXT4":71,"TEXT1":72,"TEXT2":73,"TEXT3":74,"BOOLEAN":75,"boolen":76,"BOOLEAN1":77,"T_LOG":78,"EXP_LOG1":79,"F_LOG":80,"T_LOG1":81,"not":82,"F_LOG1":83,"true":84,"false":85,"LLAMADA":86,"PARAMS1":87,"CONDICIONAL":88,"CONDICIONAL1":89,"FOR":90,"for":91,"FOR1":92,"llaveApertura":93,"INSTRUCCIONES":94,"llaveCierre":95,"FOR_INST":96,"WHILE":97,"while":98,"DO_WHILE":99,"do":100,"whileparentesisApertura":101,"IF":102,"if":103,"ELSE_IF":104,"else":105,"ELSE":106,"METODO":107,"public":108,"MOTODO1":109,"METODO1":110,"PARAMS_METODO":111,"return":112,"void":113,"PARAMS_METODO1":114,"MAINCLASS":115,"class":116,"MAIN":117,"MAINCLASS1":118,"static":119,"corcheteApertura":120,"corcheteCierre":121,"CLASE":122,"CLASE1":123,"CLASE2":124,"DECLARACION":125,"INICIALIZACION":126,"PRINT":127,"System":128,"punto":129,"out":130,"PRINT1":131,"print":132,"println":133,"INTERFACE":134,"interface":135,"INTERFACE1":136,"INSTRUCCIONES1":137,"INICIO":138,"INICIO1":139,"EOF":140,"$accept":0,"$end":1},
terminals_: {2:"error",4:"int",5:"boolean",6:"double",7:"String",8:"char",10:"break",11:"puntoComa",13:"continue",15:"mayor",16:"menor",17:"igualLog",18:"menorIgual",19:"mayorIgual",20:"diferente",22:"incremento",23:"decremento",25:"id",27:"parentesisApertura",29:"parentesisCierre",40:"mas",42:"menos",43:"multiplicacion",44:"division",46:"cadena",49:"or",50:"and",51:"xor",56:"entero",57:"decimal",60:"igualAR",61:"coma",66:"caracter",76:"boolen",82:"not",84:"true",85:"false",91:"for",93:"llaveApertura",95:"llaveCierre",98:"while",100:"do",101:"whileparentesisApertura",103:"if",105:"else",108:"public",109:"MOTODO1",112:"return",113:"void",116:"class",119:"static",120:"corcheteApertura",121:"corcheteCierre",128:"System",129:"punto",130:"out",132:"print",133:"println",135:"interface",140:"EOF"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[9,2],[9,0],[12,2],[12,0],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,0],[21,1],[21,1],[24,2],[26,3],[26,0],[30,4],[30,2],[30,1],[30,1],[30,1],[30,2],[35,1],[35,0],[32,1],[32,3],[32,0],[38,2],[38,2],[38,2],[38,2],[41,1],[41,4],[36,3],[36,0],[45,2],[45,0],[31,4],[31,2],[31,1],[31,1],[47,2],[47,2],[48,1],[48,1],[48,1],[48,1],[39,1],[39,1],[39,1],[33,2],[53,3],[53,3],[53,0],[52,2],[55,3],[55,3],[55,0],[54,3],[54,1],[54,1],[54,1],[58,4],[59,3],[59,3],[59,0],[62,4],[62,2],[63,3],[63,3],[63,0],[64,4],[64,2],[65,3],[65,3],[65,0],[67,4],[67,2],[68,3],[68,3],[68,0],[37,1],[37,1],[69,4],[69,4],[69,4],[69,2],[69,2],[70,6],[72,3],[72,0],[73,2],[73,2],[73,2],[73,4],[73,1],[73,1],[74,2],[74,0],[71,1],[71,1],[75,4],[75,2],[77,3],[77,3],[77,0],[34,2],[79,3],[79,3],[79,0],[78,2],[81,3],[81,0],[80,2],[80,1],[83,3],[83,1],[83,1],[83,1],[86,4],[28,2],[87,3],[87,0],[88,2],[89,2],[89,0],[90,9],[92,9],[96,1],[96,1],[97,9],[99,10],[102,8],[104,2],[104,0],[106,1],[106,3],[107,2],[110,10],[110,8],[111,3],[114,4],[114,0],[115,7],[117,13],[118,1],[118,0],[122,7],[123,2],[123,0],[124,2],[124,0],[125,1],[125,1],[125,1],[125,1],[125,1],[126,4],[126,2],[127,9],[127,2],[131,1],[131,1],[134,6],[136,2],[136,0],[94,2],[94,0],[137,1],[137,1],[137,1],[137,1],[137,1],[137,1],[137,2],[137,1],[138,3],[139,2],[139,2],[139,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 68: case 69:
this.$ = "= "+""; console.log("hola"); 
break;
case 73:
console.log("error en linea "+this._$.first_line+ "fila "+this._$.first_column)
break;
case 78: case 83: case 108: case 164: case 166:
console.log("error en "+this._$.first_line+ "fila "+this._$.first_column)
break;
}
},
table: [{108:[1,3],115:2,138:1},{1:[3]},{108:$V0,122:5,134:6,139:4,140:$V1},{116:[1,8]},{140:[1,9]},{108:$V0,122:5,134:6,139:10,140:$V1},{108:$V0,122:5,134:6,139:11,140:$V1},{116:[1,12],135:[1,13]},{25:[1,14]},{1:[2,182]},{140:[2,183]},{140:[2,184]},{25:[1,15]},{25:[1,16]},{93:[1,17]},{93:[1,18]},{93:[1,19]},{108:[1,21],117:20},o($V2,$V3,{123:22,125:23,58:24,67:25,62:26,64:27,75:28,2:$V4,4:$V5,6:$V6,7:$V7,8:$V8,76:$V9}),{95:$Va,107:36,108:$Vb,136:35},{95:[2,152],107:39,108:$Vb,118:38},{119:[1,40]},{95:$Vc,107:42,108:$Vb,124:41},o($V2,$V3,{125:23,58:24,67:25,62:26,64:27,75:28,123:43,2:$V4,4:$V5,6:$V6,7:$V7,8:$V8,76:$V9}),o($Vd,[2,158]),o($Vd,[2,159]),o($Vd,[2,160]),o($Vd,[2,161]),o($Vd,[2,162]),{25:[1,44]},{25:[1,45]},{11:[1,46]},{25:[1,47]},{25:[1,48]},{25:[1,49]},{95:[1,50]},{95:$Va,107:36,108:$Vb,136:51},{109:[1,52]},{95:[1,53]},{95:[2,151]},{113:[1,54]},{95:[1,55]},{95:$Vc,107:42,108:$Vb,124:56},o($V2,[2,154]),{11:$Ve,59:57,60:$Vf,61:$Vg},{11:$Vh,60:$Vi,61:$Vj,68:60},o([2,4,6,7,8,76,95,108],[2,83]),{11:$Vk,60:$Vl,61:$Vm,63:63},{11:$Vn,60:$Vo,61:$Vp,65:66},{11:$Vq,60:$Vr,61:$Vs,77:69},o($Vt,[2,169]),{95:[2,170]},o($V2,[2,143]),o($Vt,[2,149]),{25:[1,72]},o($Vt,[2,153]),{95:[2,156]},{11:[1,73]},{24:80,25:$Vu,27:$Vv,33:74,52:75,54:76,56:$Vw,57:$Vx},{25:[1,82]},{11:[1,83]},{8:$Vy,24:91,25:$Vu,27:$Vz,37:84,46:$VA,56:$VB,57:$VC,69:85,70:86},{25:[1,93]},{11:[1,94]},{24:80,25:$Vu,27:$Vv,33:95,52:75,54:76,56:$Vw,57:$Vx},{25:[1,96]},{11:[1,97]},{66:[1,98]},{25:[1,99]},{11:[1,100]},{24:109,25:$Vu,27:$VD,34:101,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},{25:[1,110]},{27:[1,111]},o($Vd,[2,68]),{11:$Ve,59:112,60:$Vf,61:$Vg},o($VH,$VI,{53:113,40:$VJ,42:$VK}),o($VL,$VM,{55:116,43:$VN,44:$VO}),{24:80,25:$Vu,27:$Vv,33:119,52:75,54:76,56:$Vw,57:$Vx},o($VP,$VQ),o($VP,$VR),o($VP,$VS),o([8,11,15,16,17,18,19,20,25,29,40,42,43,44,46,49,50,51,56,57,60,61,82,84,85],[2,21],{26:120,27:$VT}),{11:$Ve,59:122,60:$Vf,61:$Vg},o($Vd,[2,82]),{11:$Vh,60:$Vi,61:$Vj,68:123},o($VH,[2,87]),o($VH,[2,88]),{40:[1,124]},{40:$VU},{40:$VV},o($VH,$VW,{72:127,40:$VX}),o($VH,$VW,{72:129,40:$VX}),{24:132,25:$Vu,27:$VY,31:130,33:133,34:134,52:75,54:76,56:$Vw,57:$Vx,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},{11:$Vh,60:$Vi,61:$Vj,68:135},o($Vd,[2,72]),{11:$Vk,60:$Vl,61:$Vm,63:136},{11:$Vk,60:$Vl,61:$Vm,63:137},o($Vd,[2,77]),{11:$Vn,60:$Vo,61:$Vp,65:138},{11:$Vn,60:$Vo,61:$Vp,65:139},o($Vd,[2,107]),{11:$Vq,60:$Vr,61:$Vs,77:140},o($VZ,$V_,{79:141,49:$V$,50:$V01}),o($V11,$V21,{81:144,51:$V31}),{24:109,25:$Vu,27:$VD,83:146,84:$VF,85:$VG},o($V41,[2,120]),{24:109,25:$Vu,27:$VD,34:147,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},o($V41,[2,122]),o($V41,[2,123]),o($V41,[2,124]),{11:$Vq,60:$Vr,61:$Vs,77:148},{7:[1,149]},{11:[2,69]},o($VH,[2,56]),{24:80,25:$Vu,27:$Vv,52:150,54:76,56:$Vw,57:$Vx},{24:80,25:$Vu,27:$Vv,52:151,54:76,56:$Vw,57:$Vx},o($VL,[2,60]),{24:80,25:$Vu,27:$Vv,54:152,56:$Vw,57:$Vx},{24:80,25:$Vu,27:$Vv,54:153,56:$Vw,57:$Vx},{29:$V51},o($V61,[2,19]),o($V71,$V81,{52:75,54:76,69:85,70:86,78:102,80:103,83:105,28:155,30:156,24:158,33:159,34:160,35:161,37:163,8:$V91,25:$Vu,27:$Va1,46:$VA,56:$Vb1,57:$Vc1,82:$VE,84:$VF,85:$VG}),{11:[2,70]},{11:[2,84]},{25:$Vd1,46:$Ve1,71:166},{25:$Vd1,46:$Ve1,71:169},{25:$Vd1,46:$Ve1,71:170},o($VH,[2,92]),{8:[1,172],24:176,25:$Vu,27:[1,175],46:[1,177],56:[1,173],57:[1,174],73:171},o($VH,[2,93]),{29:[1,178]},{24:132,25:$Vu,27:$VY,31:179,33:180,34:181,52:75,54:76,56:$Vw,57:$Vx,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},{29:$VS,39:184,40:$Vf1,42:$Vg1,43:$Vh1,44:$Vi1,47:182,48:183,49:$Vj1,50:$Vk1,51:$Vl1},{29:[2,45]},{29:[2,46]},{11:[2,85]},{11:[2,74]},{11:[2,75]},{11:[2,79]},{11:[2,80]},{11:[2,109]},o($VZ,[2,112]),{24:109,25:$Vu,27:$VD,78:192,80:103,82:$VE,83:105,84:$VF,85:$VG},{24:109,25:$Vu,27:$VD,78:193,80:103,82:$VE,83:105,84:$VF,85:$VG},o($V11,[2,116]),{24:109,25:$Vu,27:$VD,80:194,82:$VE,83:105,84:$VF,85:$VG},o($V41,[2,119]),{29:$Vm1},{11:[2,110]},{25:[1,196]},o($VH,$VI,{53:197,40:$VJ,42:$VK}),o($VH,$VI,{53:198,40:$VJ,42:$VK}),o($VL,$VM,{55:199,43:$VN,44:$VO}),o($VL,$VM,{55:200,43:$VN,44:$VO}),o($VP,[2,64]),{29:[1,201]},{29:$Vn1,61:$Vo1,87:202},{24:132,25:$Vu,27:$VY,31:204,33:180,34:181,52:75,54:76,56:$Vw,57:$Vx,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},o($Vp1,$VS,{72:129,32:205,38:206,39:207,40:[1,208],42:$Vq1,43:$Vr1,44:$Vs1,49:$Vj1,50:$Vk1,51:$Vl1}),o($Vp1,[2,24]),o($Vp1,[2,25]),o($Vp1,[2,26]),o($Vp1,$Vt1,{36:212,40:[1,213]}),o($Vp1,[2,28]),o($Vu1,$VQ,{40:$VU}),o($Vu1,$VR,{40:$VV}),o($VH,$VW,{72:214,40:$VX}),o($VZ,$Vv1),o($VZ,$Vw1),o($VH,$VW,{72:215,40:$VX}),o($VH,$VW,{72:216,40:$VX}),o($VH,$VW,{72:217,40:$VX}),o($VH,$Vx1,{74:218,40:$Vy1}),o($VH,$Vx1,{74:220,40:$Vy1}),o($VH,$Vx1,{74:221,40:$Vy1}),{24:132,25:$Vu,27:$VY,31:222,33:133,34:134,52:75,54:76,56:$Vw,57:$Vx,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},o($VZ,$Vz1),o($VZ,$VA1),{40:[1,223]},{29:[1,224]},{29:$V51},{29:$Vm1},{29:[2,44]},{24:80,25:$Vu,27:$Vv,33:225,52:75,54:76,56:$Vw,57:$Vx},{24:109,25:$Vu,27:$VD,34:226,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},o($VB1,[2,49]),o($VB1,[2,50]),o($VB1,[2,51]),o($VB1,[2,52]),o($VC1,[2,53]),o($VC1,[2,54]),o($VC1,[2,55]),o($VZ,$V_,{79:227,49:$V$,50:$V01}),o($VZ,$V_,{79:228,49:$V$,50:$V01}),o($V11,$V21,{81:229,51:$V31}),o($V41,[2,121]),{120:[1,230]},o($VH,[2,57]),o($VH,[2,58]),o($VL,[2,61]),o($VL,[2,62]),o($V61,[2,20]),o($V71,[2,126]),o($V71,$V81,{52:75,54:76,69:85,70:86,78:102,80:103,83:105,30:156,24:158,33:159,34:160,35:161,37:163,28:231,8:$V91,25:$Vu,27:$Va1,46:$VA,56:$Vb1,57:$Vc1,82:$VE,84:$VF,85:$VG}),{29:[1,232]},o($Vp1,[2,23]),o($Vp1,[2,30]),{24:109,25:$Vu,27:$VD,34:233,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},{8:[1,235],24:239,25:$Vu,27:[1,238],37:241,41:234,46:[1,240],56:[1,236],57:[1,237],69:85,70:86,73:171},{24:80,25:$Vu,27:$Vv,33:242,52:75,54:76,56:$Vw,57:$Vx},{24:80,25:$Vu,27:$Vv,33:243,52:75,54:76,56:$Vw,57:$Vx},{24:80,25:$Vu,27:$Vv,33:244,52:75,54:76,56:$Vw,57:$Vx},o($Vp1,[2,27]),{25:$Vd1,46:[1,245],71:166},o($VH,[2,89]),o($VH,[2,90]),o($VH,[2,91]),o($VH,[2,95]),o($VZ,[2,97]),{25:$Vd1,46:$Ve1,71:246},o($VZ,[2,98]),o($VZ,[2,99]),{29:[1,247]},{25:$Vd1,46:$Ve1,71:248},{39:184,40:$Vf1,42:$Vg1,43:$Vh1,44:$Vi1,47:249,48:183,49:$Vj1,50:$Vk1,51:$Vl1},{29:[2,47]},{29:[2,48]},o($VZ,[2,113]),o($VZ,[2,114]),o($V11,[2,117]),{121:[1,250]},{29:$Vn1,61:$Vo1,87:251},o($Vp1,[2,32],{38:206,39:207,32:252,40:[1,253],42:$Vq1,43:$Vr1,44:$Vs1,49:$Vj1,50:$Vk1,51:$Vl1}),o($Vp1,$Vt1,{36:254,40:[1,255]}),o($Vp1,[2,33]),o($Vp1,$Vx1,{74:218,40:[1,256]}),o($Vp1,$Vx1,{74:220,40:[1,257]}),o($Vp1,$Vx1,{74:221,40:[1,258]}),{24:132,25:$Vu,27:$VY,31:259,33:260,34:134,52:75,54:76,56:$Vw,57:$Vx,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},o($Vp1,$Vz1,{72:129,40:$VX}),o($Vp1,$VA1,{72:127,40:$VX}),o($Vp1,[2,37]),o($Vp1,[2,34]),o($Vp1,[2,35]),o($Vp1,[2,36]),o($Vp1,$Vv1,{45:261,40:$VD1}),o($VZ,$VE1),o($VH,$Vx1,{74:263,40:$Vy1}),o($VH,$VW,{72:264,40:$VX}),{29:[2,43]},{29:[1,265]},o($V71,[2,127]),o($Vp1,[2,22]),{8:$Vy,24:91,25:[1,267],27:[1,268],37:241,41:234,46:[1,266],56:$VB,57:$VC,69:85,70:86,71:248},o($Vp1,[2,31]),{46:[1,269]},{25:$Vd1,46:$Ve1,71:270},{25:$Vd1,46:$Ve1,71:271},{25:$Vd1,46:$Ve1,71:272},{29:[1,273]},{29:[1,274]},o($Vp1,[2,39]),{8:$Vy,24:91,25:$Vu,27:$Vz,37:275,46:$VA,56:$VB,57:$VC,69:85,70:86},o($VZ,[2,100]),o($VH,[2,94]),{93:[1,276]},o($Vp1,$Vv1,{72:127,40:$VX}),o([8,11,15,16,17,18,19,20,25,29,40,46,56,57,61,82,84,85],$Vw1,{26:120,27:$VT}),{24:132,25:$Vu,27:$VY,31:130,33:260,34:134,52:75,54:76,56:$Vw,57:$Vx,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},o($Vp1,$VF1,{45:261,40:$VD1}),o($Vp1,$VE1,{72:214,40:$VX}),o($Vp1,$VE1,{72:215,40:$VX}),o($Vp1,$VE1,{72:216,40:$VX}),o($Vp1,$Vx1,{74:263,40:[1,277]}),o($Vp1,$VF1,{45:278,40:$VD1}),o($Vp1,[2,41]),{2:$VG1,4:$V5,6:$V6,7:$V7,8:$V8,25:$VH1,58:24,62:26,64:27,67:25,75:28,76:$V9,86:287,90:284,91:$VI1,94:279,95:$VJ1,97:281,98:$VK1,99:282,100:$VL1,102:283,103:$VM1,125:286,126:285,127:288,128:$VN1,137:280},{25:$Vd1,46:$Ve1,71:296},o($Vp1,[2,38]),{95:[1,297]},o($VO1,$VJ1,{58:24,67:25,62:26,64:27,75:28,137:280,97:281,99:282,102:283,90:284,126:285,125:286,86:287,127:288,94:298,2:$VG1,4:$V5,6:$V6,7:$V7,8:$V8,25:$VH1,76:$V9,91:$VI1,98:$VK1,100:$VL1,103:$VM1,128:$VN1}),o($VP1,[2,174]),o($VP1,[2,175]),o($VP1,[2,176]),o($VP1,[2,177]),o($VP1,[2,178]),o($VP1,[2,179]),{11:[1,299]},o($VP1,[2,181]),{27:[1,300]},{93:[1,301]},{27:[1,302]},{27:[1,303]},{27:[1,305],60:[1,304]},{11:[1,306]},{129:[1,307]},o($Vp1,$VE1,{72:264,40:$VX}),o($V2,[2,150]),o($VO1,[2,172]),o($VP1,[2,180]),o($VQ1,$V81,{52:75,54:76,69:85,70:86,78:102,80:103,83:105,24:158,33:159,34:160,35:161,37:163,88:308,30:309,8:$V91,25:$Vu,27:$Va1,46:$VA,56:$Vb1,57:$Vc1,82:$VE,84:$VF,85:$VG}),o($VO1,$VJ1,{58:24,67:25,62:26,64:27,75:28,137:280,97:281,99:282,102:283,90:284,126:285,125:286,86:287,127:288,94:310,2:$VG1,4:$V5,6:$V6,7:$V7,8:$V8,25:$VH1,76:$V9,91:$VI1,98:$VK1,100:$VL1,103:$VM1,128:$VN1}),o($VQ1,$V81,{52:75,54:76,69:85,70:86,78:102,80:103,83:105,24:158,33:159,34:160,35:161,37:163,30:309,88:311,8:$V91,25:$Vu,27:$Va1,46:$VA,56:$Vb1,57:$Vc1,82:$VE,84:$VF,85:$VG}),{3:313,4:[1,314],5:[1,315],6:[1,316],7:[1,317],8:[1,318],92:312},{8:$V91,11:$V81,24:158,25:$Vu,27:$Va1,30:319,33:159,34:160,35:161,37:163,46:$VA,52:75,54:76,56:$Vb1,57:$Vc1,69:85,70:86,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},o($V71,$V81,{52:75,54:76,69:85,70:86,78:102,80:103,83:105,30:156,24:158,33:159,34:160,35:161,37:163,28:320,8:$V91,25:$Vu,27:$Va1,46:$VA,56:$Vb1,57:$Vc1,82:$VE,84:$VF,85:$VG}),o($VP1,[2,164]),{130:[1,321]},{29:[1,322]},o($VR1,[2,131],{89:323,14:324,15:[1,325],16:[1,326],17:[1,327],18:[1,328],19:[1,329],20:[1,330]}),o($VS1,$VT1,{9:331,10:$VU1}),{29:[1,333]},{29:[1,334]},{25:[1,335]},{25:[2,1]},{25:[2,2]},{25:[2,3]},{25:[2,4]},{25:[2,5]},{11:[1,336]},{29:[1,337]},{129:[1,338]},{93:[1,339]},o($VV1,[2,129]),o($VV1,$V81,{52:75,54:76,69:85,70:86,78:102,80:103,83:105,24:158,33:159,34:160,35:161,37:163,30:340,8:$V91,25:$Vu,27:$Va1,46:$VA,56:$Vb1,57:$Vc1,82:$VE,84:$VF,85:$VG}),o($VR1,[2,10]),o($VR1,[2,11]),o($VR1,[2,12]),o($VR1,[2,13]),o($VR1,[2,14]),o($VR1,[2,15]),{12:341,13:$VW1,95:$VX1},{11:[1,343]},{93:[1,344]},{93:[1,345]},{60:[1,346]},o($VP1,[2,163]),{11:[2,125]},{131:347,132:[1,348],133:[1,349]},o($VO1,$VJ1,{58:24,67:25,62:26,64:27,75:28,137:280,97:281,99:282,102:283,90:284,126:285,125:286,86:287,127:288,94:350,2:$VG1,4:$V5,6:$V6,7:$V7,8:$V8,25:$VH1,76:$V9,91:$VI1,98:$VK1,100:$VL1,103:$VM1,128:$VN1}),o($VV1,[2,130]),{95:[1,351]},{11:[1,352]},o($VS1,[2,6]),{2:$VG1,4:$V5,6:$V6,7:$V7,8:$V8,25:$VH1,58:24,62:26,64:27,67:25,75:28,76:$V9,86:287,90:284,91:$VI1,94:353,95:$VJ1,97:281,98:$VK1,99:282,100:$VL1,102:283,103:$VM1,125:286,126:285,127:288,128:$VN1,137:280},o($VO1,$VJ1,{58:24,67:25,62:26,64:27,75:28,137:280,97:281,99:282,102:283,90:284,126:285,125:286,86:287,127:288,94:354,2:$VG1,4:$V5,6:$V6,7:$V7,8:$V8,25:$VH1,76:$V9,91:$VI1,98:$VK1,100:$VL1,103:$VM1,128:$VN1}),{25:[1,357],56:[1,356],96:355},{27:[1,358]},{27:[2,167]},{27:[2,168]},o($VS1,$VT1,{9:359,10:$VU1}),{101:[1,360]},{95:[2,8]},{95:[1,361]},o($VS1,$VT1,{9:362,10:$VU1}),{11:[1,363]},{11:[2,134]},{11:[2,135]},{8:$V91,24:158,25:$Vu,27:$Va1,29:$V81,30:364,33:159,34:160,35:161,37:163,46:$VA,52:75,54:76,56:$Vb1,57:$Vc1,69:85,70:86,78:102,80:103,82:$VE,83:105,84:$VF,85:$VG},{12:365,13:$VW1,95:$VX1},o($VQ1,$V81,{52:75,54:76,69:85,70:86,78:102,80:103,83:105,24:158,33:159,34:160,35:161,37:163,30:309,88:366,8:$V91,25:$Vu,27:$Va1,46:$VA,56:$Vb1,57:$Vc1,82:$VE,84:$VF,85:$VG}),o($VP1,[2,140],{104:367,105:[1,368]}),{12:369,13:$VW1,95:$VX1},o([11,15,16,17,18,19,20],$V81,{52:75,54:76,69:85,70:86,78:102,80:103,83:105,24:158,33:159,34:160,35:161,37:163,30:309,88:370,8:$V91,25:$Vu,27:$Va1,46:$VA,56:$Vb1,57:$Vc1,82:$VE,84:$VF,85:$VG}),{29:[1,371]},{95:[1,372]},{29:[1,373]},o($VP1,[2,138]),{93:[1,376],102:375,103:$VM1,106:374},{95:[1,377]},{11:[1,378]},{11:[1,379]},o($VP1,[2,136]),{11:[1,380]},o($VP1,[2,139]),o($VP1,[2,141]),{2:$VG1,4:$V5,6:$V6,7:$V7,8:$V8,25:$VH1,58:24,62:26,64:27,67:25,75:28,76:$V9,86:287,90:284,91:$VI1,94:381,95:$VJ1,97:281,98:$VK1,99:282,100:$VL1,102:283,103:$VM1,125:286,126:285,127:288,128:$VN1,137:280},o($VP1,[2,132]),{25:[1,382]},o($VP1,[2,165]),o($VP1,[2,137]),{95:[1,383]},{21:384,22:[1,385],23:[1,386]},o($VP1,[2,142]),{29:[2,133]},{29:[2,17]},{29:[2,18]}],
defaultActions: {9:[2,182],10:[2,183],11:[2,184],39:[2,151],51:[2,170],56:[2,156],112:[2,69],122:[2,70],123:[2,84],133:[2,45],134:[2,46],135:[2,85],136:[2,74],137:[2,75],138:[2,79],139:[2,80],140:[2,109],148:[2,110],182:[2,44],225:[2,47],226:[2,48],249:[2,43],314:[2,1],315:[2,2],316:[2,3],317:[2,4],318:[2,5],337:[2,125],348:[2,167],349:[2,168],352:[2,8],356:[2,134],357:[2,135],384:[2,133],385:[2,17],386:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const tkn = require("./token/token");
    var lista = [];
    var js ="";



    exports.lista = lista;
    exports.js = js;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:token = new tkn.Token(yy_.yytext, 9, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 93; 
break;
case 1:token = new tkn.Token(yy_.yytext, 10, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 95; 
break;
case 2:token = new tkn.Token(yy_.yytext, 13, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 120; 
break;
case 3:token = new tkn.Token(yy_.yytext, 14, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 121; 
break;
case 4:token = new tkn.Token(yy_.yytext, 11, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 27; 
break;
case 5:token = new tkn.Token(yy_.yytext, 12, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 29; 
break;
case 6:token = new tkn.Token(yy_.yytext, 16, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 129; 
break;
case 7:token = new tkn.Token(yy_.yytext, 15, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 61; 
break;
case 8:token = new tkn.Token(yy_.yytext, 18, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 11; 
break;
case 9:token = new tkn.Token(yy_.yytext, 19, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 'dosPuntos'; 
break;
case 10:token = new tkn.Token(yy_.yytext, 32, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 17; 
break;
case 11:token = new tkn.Token(yy_.yytext, 17, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 60; 
break;
case 12:token = new tkn.Token(yy_.yytext, 20, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 40; 
break;
case 13:token = new tkn.Token(yy_.yytext, 21, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 42; 
break;
case 14:token = new tkn.Token(yy_.yytext, 22, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 43; 
break;
case 15:token = new tkn.Token(yy_.yytext, 23, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 44; 
break;
case 16:token = new tkn.Token(yy_.yytext, 30, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 19; 
break;
case 17:token = new tkn.Token(yy_.yytext, 31, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 18; 
break;
case 18:token = new tkn.Token(yy_.yytext, 24, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 15; 
break;
case 19:token = new tkn.Token(yy_.yytext, 25, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 16; 
break;
case 20:token = new tkn.Token(yy_.yytext, 33, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 20; 
break;
case 21:token = new tkn.Token(yy_.yytext, 34, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 22; 
break;
case 22:token = new tkn.Token(yy_.yytext, 35, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 23; 
break;
case 23:token = new tkn.Token(yy_.yytext, 26, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 82; 
break;
case 24:token = new tkn.Token(yy_.yytext, 27, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 51; 
break;
case 25:token = new tkn.Token(yy_.yytext, 29, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 49; 
break;
case 26:token = new tkn.Token(yy_.yytext, 28, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 50; 
break;
case 27:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 10; 
break;
case 28:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 5; 
break;
case 29:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 8; 
break;
case 30:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 116; 
break;
case 31:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 13; 
break;
case 32:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 100; 
break;
case 33:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 6; 
break;
case 34:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 105; 
break;
case 35:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 'extends'; 
break;
case 36:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 85; 
break;
case 37:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 91; 
break;
case 38:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 103; 
break;
case 39:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 4; 
break;
case 40:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 135; 
break;
case 41:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 'implements'; 
break;
case 42:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 'new'; 
break;
case 43:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 130; 
break;
case 44:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 132; 
break;
case 45:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 133; 
break;
case 46:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 108; 
break;
case 47:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 112; 
break;
case 48:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 119; 
break;
case 49:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 7; 
break;
case 50:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 128; 
break;
case 51:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 84; 
break;
case 52:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 'this'; 
break;
case 53:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 113; 
break;
case 54:token = new tkn.Token(yy_.yytext, 1, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 98; 
break;
case 55:token = new tkn.Token(yy_.yytext, 37, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 'finalArchivo'; 
break;
case 56:token = new tkn.Token(yy_.yytext, 4, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 'comentarioLinea'; 
break;
case 57:token = new tkn.Token(yy_.yytext, 3, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 'comentarioML'; 
break;
case 58:token = new tkn.Token(yy_.yytext, 2, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 46; 
break;
case 59:token = new tkn.Token(yy_.yytext, 5, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 66; 
break;
case 60:token = new tkn.Token(yy_.yytext, 6, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 25; 
break;
case 61:token = new tkn.Token(yy_.yytext, 7, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 56; 
break;
case 62:token = new tkn.Token(yy_.yytext, 8, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token); return 57; 
break;
case 63:
break;
case 64:return 140;
break;
case 65: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); token = new tkn.Token(yy_.yytext, 36, yy_.yylloc.first_line, yy_.yylloc.first_column); lista.push(token);
break;
}
},
rules: [/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:break\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:class\b)/i,/^(?:continue\b)/i,/^(?:do\b)/i,/^(?:double\b)/i,/^(?:else\b)/i,/^(?:extends\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:int\b)/i,/^(?:interface\b)/i,/^(?:implements\b)/i,/^(?:new\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:public\b)/i,/^(?:return\b)/i,/^(?:static\b)/i,/^(?:String\b)/i,/^(?:System\b)/i,/^(?:true\b)/i,/^(?:this\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:finalArchivo\b)/i,/^(?:\/\/[\n]*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/i,/^(?:[\']([^\\\"]*([\\][\\\"ntr][^\\\"]*)*)?[\'])/i,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/i,/^(?:(-)?[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[ \r\t\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}